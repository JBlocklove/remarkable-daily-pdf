#!/bin/bash

# Check if at least one argument is provided
if [[ $# -lt 1 ]]; then
    echo "Usage: download_date_range <start_date> [end_date]"
    exit 1
fi

start_date="$1"
# If end_date isn't provided, use start_date as end_date
end_date="${2:-$start_date}"

# Convert dates to timestamps
start_date_ts=$(date -d "$start_date" +%s)
end_date_ts=$(date -d "$end_date" +%s)

# If invalid date is provided, exit
if [[ $? -ne 0 ]]; then
    echo "Invalid date provided."
    exit 2
fi

selected_date=$start_date_ts

while [[ "$selected_date" -le "$end_date_ts" ]]; do
	./rm-sync-pdf -u "https://www.nytimes.com/svc/crosswords/v2/puzzle/print/`date -d "@$selected_date" +%b%d%y`.pdf" -n "`date -d "@$selected_date" +'%d - %a'`" -d "/Crosswords/`date +'%Y'`/`date -d "@$selected_date" +'%m - %b'`" -c "./nyt-cookies.txt"
    #reformatted_date=$(date -d "@$selected_date" +"%Y-%m-%d")  # Modify the format as you like
    #echo "$reformatted_date"

    # Increment the date by one day (86400 seconds in a day)
    selected_date=$((selected_date + 86400))
done

systemctl restart xochitl.service
